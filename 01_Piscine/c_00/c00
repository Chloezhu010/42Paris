check:

gcc -Wall -Wextra -Werror <filename>

# ex01

## Compile
-Wall: Enables all the basic warning messages. It helps in identifying potential issues in your code.
-Wextra: Enables additional warning messages that are not included with -Wall. This provides further insights into possible problems.
-Werror: Treats all warnings as errors. This means that if there are any warnings, the compilation will fail, forcing you to address them before proceeding.

## Void

Basically it means "nothing" or "no type"

There are 3 basic ways that void is used:

    - Function argument: int myFunc(void) -- the function takes nothing.

    - Function return value: void myFunc(int) -- the function returns nothing

    - Generic data pointer: void* data -- 'data' is a pointer to data of unknown type, and cannot be dereferenced

Note: the void in a function argument is optional in C++, so int myFunc() is exactly the same as int myFunc(void), and it is left out completely in C#. It is always required for a return value.

## write
ref link: http://codewiki.wikidot.com/c:system-calls:write

ssize_t write(int fildes, const void *buf, size_t nbytes);
- int fildes: use 0, 1, or 2, to refer to standard input, standard output, or standard error.
    - 1: standard output
- const void *buf: A pointer to a buffer of at least nbytes bytes, which will be written to the file.
    - In C, the & operator is used to get the address of a variable. It is called the address-of or reference operator.
    - &c: The address of the character c to be written.
- size_t nbytes: The number of bytes to write. If smaller than the provided buffer, the output is truncated.

#include <unistd.h>

void ft_putchar(char c) {
    write(1, &c, 1);
}


# ex01
ascii: low key alphabet, from 97 to 122

#include <unistd.h>

void ft_print_alphabet(void) {
    char i;
    i = 97;
    while (i < 123){
        write(1, &i, 1);
        i++;
    }
}


# ex02
similar to ex01, but reverse

#include <unistd.h>

void ft_print_reverse_alphabet(void) {
    char i;
    i = 122;
    while (i > 96){
        write(1, &i, 1);
        i --;
    }
}

int main(void){
    ft_print_reverse_alphabet();
}

# ex03
#include <unistd.h>

void ft_print_numbers(void) {
    char i;
    i = 48;
    while (i < 58) {
        write(1, &i, 1);
        i ++;
    }
}

int main(void){
    ft_print_numbers();
}

# ex04
#include <unistd.h>

void ft_is_negative(int n){
    if (n >= 0) {
        write(1, "P", 1);
    } else {
        write(1, "N", 1);
    }

}

int main(void){
    ft_is_negative(5);
    ft_is_negative(0);
    ft_is_negative(-5);
}


# ex05
#include <unistd.h>

void ft_putchar(char c) {
    write(1, &c, 1);
}

void ft_print_comb(void) {
    int a;
    int b;
    int c;

    a = '0';
    while (a <= '7'){
        b = a + 1;
        while (b <= '8'){
            c = b + 1;
            while (c <= '9'){
                ft_putchar(a);
                ft_putchar(b);
                ft_putchar(c);
                if (a != '7'){
                    write(1, ", ", 2);
                }
                c++;
            }
        b++;
        }
    a++;
    }
}

int main(void){
    ft_print_comb();
}

# ex06
#include <unistd.h>

void ft_putchar(char c) {
    write(1, &c, 1);
}

void ft_print_comb2(void) {

}




